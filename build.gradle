//file:noinspection GroovyAssignabilityCheck
/*
import org.jetbrains.changelog.Changelog
import org.jetbrains.changelog.ChangelogSectionUrlBuilder
import org.jetbrains.changelog.ExtensionsKt
*/

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.8.20"
    id "org.jetbrains.intellij" version "1.13.3"
//    id "org.jetbrains.changelog" version "2.0.0"
    id 'maven-publish'
    id "signing"
}

//apply plugin: "org.jetbrains.changelog"

def javaVersion = properties["javaVersion"] ?: "11"
def projectVersion = properties["projectVersion"] ?: "1.0.SNAPSHOT"
def projectArtifactId = properties["projectArtifactId"] ?: ""
def projectGroup = properties["projectGroup"] ?: "com.vladsch.${projectArtifactId}"

group = projectGroup
version = projectVersion

repositories {
    mavenCentral()
    mavenLocal()
}

// Configure Gradle IntelliJ Plugin
// Read more: https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html
intellij {
    version = "2020.3"
    type = "CL" // Target IDE Platform
    plugins = []
    downloadSources = true
}

dependencies {
    testImplementation "junit:junit:4.13.2"

    compileOnly "org.jetbrains:annotations:24.0.1"
    implementation("io.github.java-native:jssc:2.9.4") {
        exclude(group: "org.slf4j", module: "slf4j-api")
    }

//    compileOnly(files("lib/serial-monitor.jar"))
}

// Set the JVM compatibility versions
compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

compileKotlin {
    kotlinOptions.jvmTarget = javaVersion
}

/*
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = projectGroup
            artifactId = projectArtifactId
            version = projectVersion

            from components.java
            
            pom {
                name = "${projectArtifactId}-lib"
                description = "Wrapper of jssc library as a service for use in Kotlin/Java JetBrains plugin projects"

                withXml {
                    asNode()
                            .appendNode('parent')
                            .with {
                                appendNode "groupId", projectGroup
                                appendNode "artifactId", projectArtifactId
                                appendNode "version", projectVersion
                            }
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/vsch/SimpleSerialConnectorService"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
*/

/*
changelog {
    version = projectVersion
    path = file("CHANGELOG.md").canonicalPath
    header = "[${-> version.get()}] - ${ExtensionsKt.date("yyyy-MM-dd")}"
    headerParserRegex = ~/(\d+\.\d+)/
    introduction = """
    """.stripIndent()
    itemPrefix = "*"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
    lineSeparator = "\n"
    combinePreReleases = true
    sectionUrlBuilder = { repositoryUrl, currentVersion, previousVersion, isUnreleased -> "foo" } as ChangelogSectionUrlBuilder
}
*/

tasks {
    instrumentCode.enabled = false
    setupInstrumentCode.enabled = false
    instrumentCode.enabled = false
    instrumentedJar.enabled = false
    prepareSandbox.enabled = false
    buildSearchableOptions.enabled = false
    jarSearchableOptions.enabled = false
    runIde.enabled = false

    patchPluginXml {
        version = projectVersion
        sinceBuild = projectSinceBuild
        untilBuild = projectUntilBuild

/*
        changeNotes = provider {
            "<![CDATA[" + changelog.renderItem(
                    changelog
                            .getUnreleased()
                            .withHeader(false)
                            .withEmptySections(false),
                    Changelog.OutputType.HTML
            ) + "]]>"
        }
*/
    }

    signPlugin {
        certificateChainFile = file(System.getenv("CERTIFICATE_CHAIN"))
        privateKeyFile = file(System.getenv("PRIVATE_KEY"))
        password = System.getenv("PRIVATE_KEY_PASSWORD")
    }

    publishPlugin {
        token = System.getenv("PUBLISH_TOKEN")
    }
}
